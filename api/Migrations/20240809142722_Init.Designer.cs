// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using api.Data;

#nullable disable

namespace api.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240809142722_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "d6a36193-201d-46a1-a27c-c51bbb194ee8",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "0eb0df37-8d82-4f5f-b371-870c264c58db",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("api.Models.Static.Ability", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("FlavorText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Ability");
                });

            modelBuilder.Entity("api.Models.Static.BaseStats", b =>
                {
                    b.Property<int>("PokemonId")
                        .HasColumnType("int");

                    b.Property<int>("Attack")
                        .HasColumnType("int");

                    b.Property<int>("Defense")
                        .HasColumnType("int");

                    b.Property<int>("HP")
                        .HasColumnType("int");

                    b.Property<int>("SpecialAttack")
                        .HasColumnType("int");

                    b.Property<int>("SpecialDefense")
                        .HasColumnType("int");

                    b.Property<int>("Speed")
                        .HasColumnType("int");

                    b.HasKey("PokemonId");

                    b.ToTable("BaseStats");
                });

            modelBuilder.Entity("api.Models.Static.DamageClass", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DamageClass");
                });

            modelBuilder.Entity("api.Models.Static.Gender", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Gender");
                });

            modelBuilder.Entity("api.Models.Static.Item", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Effect")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Item");
                });

            modelBuilder.Entity("api.Models.Static.Move", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int?>("Accuracy")
                        .HasColumnType("int");

                    b.Property<int>("DamageClassId")
                        .HasColumnType("int");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MoveEffectChance")
                        .HasColumnType("int");

                    b.Property<int?>("MoveEffectId")
                        .HasColumnType("int");

                    b.Property<int?>("PP")
                        .HasColumnType("int")
                        .HasColumnName("pp");

                    b.Property<int>("PkmnTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("Power")
                        .HasColumnType("int");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DamageClassId");

                    b.HasIndex("MoveEffectId");

                    b.HasIndex("PkmnTypeId");

                    b.ToTable("Move");
                });

            modelBuilder.Entity("api.Models.Static.MoveEffect", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MoveEffect");
                });

            modelBuilder.Entity("api.Models.Static.Nature", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<double>("AttackMultiplier")
                        .HasColumnType("float");

                    b.Property<double>("DefenseMultiplier")
                        .HasColumnType("float");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("SpecialAttackMultiplier")
                        .HasColumnType("float");

                    b.Property<double>("SpecialDefenseMultiplier")
                        .HasColumnType("float");

                    b.Property<double>("SpeedMultiplier")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Nature");
                });

            modelBuilder.Entity("api.Models.Static.PkmnType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PkmnType");
                });

            modelBuilder.Entity("api.Models.Static.Pokemon", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SpeciesId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Pokemon");
                });

            modelBuilder.Entity("api.Models.Static.PokemonAbility", b =>
                {
                    b.Property<int>("AbilityId")
                        .HasColumnType("int");

                    b.Property<int>("PokemonId")
                        .HasColumnType("int");

                    b.Property<int>("Slot")
                        .HasColumnType("int");

                    b.HasKey("AbilityId", "PokemonId");

                    b.HasIndex("PokemonId");

                    b.ToTable("PokemonAbility");
                });

            modelBuilder.Entity("api.Models.Static.PokemonGender", b =>
                {
                    b.Property<int>("GenderId")
                        .HasColumnType("int");

                    b.Property<int>("PokemonId")
                        .HasColumnType("int");

                    b.HasKey("GenderId", "PokemonId");

                    b.HasIndex("PokemonId");

                    b.ToTable("PokemonGender");
                });

            modelBuilder.Entity("api.Models.Static.PokemonMove", b =>
                {
                    b.Property<int>("MoveId")
                        .HasColumnType("int");

                    b.Property<int>("PokemonId")
                        .HasColumnType("int");

                    b.HasKey("MoveId", "PokemonId");

                    b.HasIndex("PokemonId");

                    b.ToTable("PokemonMove");
                });

            modelBuilder.Entity("api.Models.Static.PokemonPkmnType", b =>
                {
                    b.Property<int>("PkmnTypeId")
                        .HasColumnType("int");

                    b.Property<int>("PokemonId")
                        .HasColumnType("int");

                    b.Property<int>("Slot")
                        .HasColumnType("int");

                    b.HasKey("PkmnTypeId", "PokemonId");

                    b.HasIndex("PokemonId");

                    b.ToTable("PokemonPkmnType");
                });

            modelBuilder.Entity("api.Models.User.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "test1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "62b292d5-3c9b-49fd-87ad-a88ec3caa246",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "844fbab4-9caf-47ae-8b53-d816f99bcd48",
                            TwoFactorEnabled = false,
                            UserName = "TestUser1"
                        },
                        new
                        {
                            Id = "test2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b8e3d1f2-6919-49cf-aa41-3ef188771ec0",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "27a865f6-0f4d-4e05-b96d-c46427268f98",
                            TwoFactorEnabled = false,
                            UserName = "TestUser2"
                        });
                });

            modelBuilder.Entity("api.Models.User.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TeamName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("Team");
                });

            modelBuilder.Entity("api.Models.User.UserPokemon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AbilityId")
                        .HasColumnType("int");

                    b.Property<int>("AttackEV")
                        .HasColumnType("int");

                    b.Property<int>("AttackIV")
                        .HasColumnType("int");

                    b.Property<int>("DefenseEV")
                        .HasColumnType("int");

                    b.Property<int>("DefenseIV")
                        .HasColumnType("int");

                    b.Property<int>("GenderId")
                        .HasColumnType("int");

                    b.Property<int>("HPEV")
                        .HasColumnType("int");

                    b.Property<int>("HPIV")
                        .HasColumnType("int");

                    b.Property<int?>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<int?>("Move1Id")
                        .HasColumnType("int");

                    b.Property<int?>("Move2Id")
                        .HasColumnType("int");

                    b.Property<int?>("Move3Id")
                        .HasColumnType("int");

                    b.Property<int?>("Move4Id")
                        .HasColumnType("int");

                    b.Property<int>("NatureId")
                        .HasColumnType("int");

                    b.Property<string>("Nickname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PokemonId")
                        .HasColumnType("int");

                    b.Property<bool>("Shiny")
                        .HasColumnType("bit");

                    b.Property<int>("SpecialAttackEV")
                        .HasColumnType("int");

                    b.Property<int>("SpecialAttackIV")
                        .HasColumnType("int");

                    b.Property<int>("SpecialDefenseEV")
                        .HasColumnType("int");

                    b.Property<int>("SpecialDefenseIV")
                        .HasColumnType("int");

                    b.Property<int>("SpeedEV")
                        .HasColumnType("int");

                    b.Property<int>("SpeedIV")
                        .HasColumnType("int");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.Property<int>("TeamSlot")
                        .HasColumnType("int");

                    b.Property<int>("TeraPkmnTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AbilityId");

                    b.HasIndex("GenderId");

                    b.HasIndex("ItemId");

                    b.HasIndex("Move1Id");

                    b.HasIndex("Move2Id");

                    b.HasIndex("Move3Id");

                    b.HasIndex("Move4Id");

                    b.HasIndex("NatureId");

                    b.HasIndex("PokemonId");

                    b.HasIndex("TeamId");

                    b.HasIndex("TeraPkmnTypeId");

                    b.ToTable("UserPokemon");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("api.Models.User.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("api.Models.User.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.User.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("api.Models.User.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("api.Models.Static.BaseStats", b =>
                {
                    b.HasOne("api.Models.Static.Pokemon", "Pokemon")
                        .WithOne("BaseStats")
                        .HasForeignKey("api.Models.Static.BaseStats", "PokemonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pokemon");
                });

            modelBuilder.Entity("api.Models.Static.Move", b =>
                {
                    b.HasOne("api.Models.Static.DamageClass", "DamageClass")
                        .WithMany()
                        .HasForeignKey("DamageClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.Static.MoveEffect", "MoveEffect")
                        .WithMany("Moves")
                        .HasForeignKey("MoveEffectId");

                    b.HasOne("api.Models.Static.PkmnType", "PkmnType")
                        .WithMany()
                        .HasForeignKey("PkmnTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DamageClass");

                    b.Navigation("MoveEffect");

                    b.Navigation("PkmnType");
                });

            modelBuilder.Entity("api.Models.Static.PokemonAbility", b =>
                {
                    b.HasOne("api.Models.Static.Ability", "Ability")
                        .WithMany()
                        .HasForeignKey("AbilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.Static.Pokemon", "Pokemon")
                        .WithMany("PokemonAbilities")
                        .HasForeignKey("PokemonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ability");

                    b.Navigation("Pokemon");
                });

            modelBuilder.Entity("api.Models.Static.PokemonGender", b =>
                {
                    b.HasOne("api.Models.Static.Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.Static.Pokemon", "Pokemon")
                        .WithMany()
                        .HasForeignKey("PokemonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gender");

                    b.Navigation("Pokemon");
                });

            modelBuilder.Entity("api.Models.Static.PokemonMove", b =>
                {
                    b.HasOne("api.Models.Static.Move", "Move")
                        .WithMany()
                        .HasForeignKey("MoveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.Static.Pokemon", "Pokemon")
                        .WithMany("PokemonMoves")
                        .HasForeignKey("PokemonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Move");

                    b.Navigation("Pokemon");
                });

            modelBuilder.Entity("api.Models.Static.PokemonPkmnType", b =>
                {
                    b.HasOne("api.Models.Static.PkmnType", "PkmnType")
                        .WithMany()
                        .HasForeignKey("PkmnTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.Static.Pokemon", "Pokemon")
                        .WithMany("PokemonPkmnTypes")
                        .HasForeignKey("PokemonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PkmnType");

                    b.Navigation("Pokemon");
                });

            modelBuilder.Entity("api.Models.User.Team", b =>
                {
                    b.HasOne("api.Models.User.AppUser", "AppUser")
                        .WithMany("Teams")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("api.Models.User.UserPokemon", b =>
                {
                    b.HasOne("api.Models.Static.Ability", "Ability")
                        .WithMany()
                        .HasForeignKey("AbilityId");

                    b.HasOne("api.Models.Static.Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.Static.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId");

                    b.HasOne("api.Models.Static.Move", "Move1")
                        .WithMany()
                        .HasForeignKey("Move1Id");

                    b.HasOne("api.Models.Static.Move", "Move2")
                        .WithMany()
                        .HasForeignKey("Move2Id");

                    b.HasOne("api.Models.Static.Move", "Move3")
                        .WithMany()
                        .HasForeignKey("Move3Id");

                    b.HasOne("api.Models.Static.Move", "Move4")
                        .WithMany()
                        .HasForeignKey("Move4Id");

                    b.HasOne("api.Models.Static.Nature", "Nature")
                        .WithMany()
                        .HasForeignKey("NatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.Static.Pokemon", "Pokemon")
                        .WithMany()
                        .HasForeignKey("PokemonId");

                    b.HasOne("api.Models.User.Team", "Team")
                        .WithMany("UserPokemon")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.Static.PkmnType", "TeraPkmnType")
                        .WithMany()
                        .HasForeignKey("TeraPkmnTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ability");

                    b.Navigation("Gender");

                    b.Navigation("Item");

                    b.Navigation("Move1");

                    b.Navigation("Move2");

                    b.Navigation("Move3");

                    b.Navigation("Move4");

                    b.Navigation("Nature");

                    b.Navigation("Pokemon");

                    b.Navigation("Team");

                    b.Navigation("TeraPkmnType");
                });

            modelBuilder.Entity("api.Models.Static.MoveEffect", b =>
                {
                    b.Navigation("Moves");
                });

            modelBuilder.Entity("api.Models.Static.Pokemon", b =>
                {
                    b.Navigation("BaseStats")
                        .IsRequired();

                    b.Navigation("PokemonAbilities");

                    b.Navigation("PokemonMoves");

                    b.Navigation("PokemonPkmnTypes");
                });

            modelBuilder.Entity("api.Models.User.AppUser", b =>
                {
                    b.Navigation("Teams");
                });

            modelBuilder.Entity("api.Models.User.Team", b =>
                {
                    b.Navigation("UserPokemon");
                });
#pragma warning restore 612, 618
        }
    }
}
